Cell.h:223:58: warning: 2.0 is a magic number; consider replacing it with a named constant 
                                xyz_min[i] = (this->xyz_min[i] + this->xyz_max[i]) / 2.0;
                                                
Cell.h:223:58: warning: 2.0 is a magic number; consider replacing it with a named constant 
Cell.h:228:58: warning: 2.0 is a magic number; consider replacing it with a named constant 
                                xyz_max[i] = (this->xyz_min[i] + this->xyz_max[i]) / 2.0;
                                                
Cell.h:228:58: warning: 2.0 is a magic number; consider replacing it with a named constant 

MPI_RMA_MemAllocator.h:75:29: warning: do not use pointer arithmetic 
                        avail.push_back(base_ptr + base_ptr_offset + i);

MPI_RMA_MemAllocator.h:75:47: warning: do not use pointer arithmetic 
                        avail.push_back(base_ptr + base_ptr_offset + i);

MPI_RMA_MemAllocator.h:179:18: warning: do not use pointer arithmetic 
                ret = base_ptr + base_ptr_offset;

MPIWrapper.h:105:78: warning: non-const reference parameter 'dst', make it const or use a pointer 
        static void all_to_all(const std::vector<size_t>& src, std::vector<size_t>& dst, Scope scope);

MPIWrapper.h:108:99: warning: non-const reference parameter 'token', make it const or use a pointer 
        static void async_send(const T* buffer, size_t size_in_bytes, int rank, Scope scope, AsyncToken& token) {

MPIWrapper.h:117:96: warning: non-const reference parameter 'token', make it const or use a pointer 
        static void async_receive(T* buffer, size_t size_in_bytes, int rank, Scope scope, AsyncToken& token) {

MPIWrapper.h:156:77: warning: non-const reference parameter 'win', make it const or use a pointer 
        static void get(T* ptr, int target_rank, MPI_Aint target_display, MPI_Win& win) {

MPIWrapper.h:163:39: warning: non-const reference parameter 'request', make it const or use a pointer 
        static void wait_request(AsyncToken& request);

MPIWrapper.h:169:74: warning: non-const reference parameter 'xyz_pos', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);

MPIWrapper.h:169:101: warning: non-const reference parameter 'recvcounts', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);

MPIWrapper.h:169:131: warning: non-const reference parameter 'displs', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);

MPIWrapper.h:171:55: warning: non-const reference parameter 'tokens', make it const or use a pointer 
        static void wait_all_tokens(std::vector<AsyncToken>& tokens);

NetworkGraph.h:63:30: warning: non-const reference parameter 'edges', make it const or use a pointer 
        static void add_edge(Edges& edges, int rank, size_t neuron_id, int weight);

NetworkGraph.h:72:171: warning: non-const reference parameter 'global_id_to_local_id', make it const or use a pointer 
        static void translate_global_to_local(const std::set<size_t>& global_ids, const std::map<size_t, int>& id_to_rank, const Partition& partition, std::map<size_t, size_t>& global_id_to_local_id);

NetworkGraph.h:74:87: warning: non-const reference parameter 'foreing_ids', make it const or use a pointer 
        static void load_neuron_positions(const std::string& path_neurons, std::set<size_t>& foreing_ids, std::map<size_t, Vec3d>& id_to_pos);

NetworkGraph.h:74:125: warning: non-const reference parameter 'id_to_pos', make it const or use a pointer 
        static void load_neuron_positions(const std::string& path_neurons, std::set<size_t>& foreing_ids, std::map<size_t, Vec3d>& id_to_pos);

NetworkGraph.h:76:101: warning: non-const reference parameter 'foreing_ids', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses) const;

NetworkGraph.h:76:160: warning: non-const reference parameter 'local_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses) const;

NetworkGraph.h:76:222: warning: non-const reference parameter 'out_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses) const;

NetworkGraph.h:76:282: warning: non-const reference parameter 'in_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses) const;
    
NeuronIdMap.h:36:24: warning: non-const reference parameter 'rank_to_start_neuron_id', make it const or use a pointer 
                std::vector<size_t>& rank_to_start_neuron_id);

NeuronIdMap.h:43:34: warning: non-const reference parameter 'pos_to_rank_neuron_id', make it const or use a pointer 
                std::map<Vec3d, RankNeuronId>& pos_to_rank_neuron_id);

Neurons.h:285:2: warning: move assignment operator is explicitly defaulted but implicitly deleted, probably because a base class or a non-static data member is not assignable, e.g. because the latter is marked 'const'; definition can either be removed or explicitly deleted [readability-deleted-default]
        Neurons& operator=(Neurons&& other) = default;

Neurons.h:285:11: warning: explicitly defaulted move assignment operator is implicitly deleted [clang-diagnostic-defaulted-function-deleted]
        Neurons& operator=(Neurons&& other) = default;

Neurons.h:459:16: note: move assignment operator of 'Neurons' is implicitly deleted because field 'random_number_generator' is of reference type 'std::mt19937 &' (aka 'mersenne_twister_engine<unsigned long, 32, 624, 397, 31, 2567483615UL, 11, 4294967295UL, 7, 2636928640UL, 15, 4022730752UL, 18, 1812433253UL> &')
        std::mt19937& random_number_generator;

Neurons.h:333:35: warning: non-const reference parameter 'global_tree', make it const or use a pointer 
        void update_connectivity(Octree& global_tree,

Neurons.h:334:17: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
                NetworkGraph& network_graph,

Neurons.h:335:11: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
                size_t& num_synapses_deleted,

Neurons.h:336:11: warning: non-const reference parameter 'num_synapses_created', make it const or use a pointer 
                size_t& num_synapses_created) {

Neurons.h:342:88: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_sums_of_synapses_and_elements_to_log_file_on_rank_0(size_t step, LogFiles& log_file, const Parameters& params, size_t sum_synapses_deleted, size_t sum_synapses_created);

Neurons.h:345:75: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_neurons_overview_to_log_file_on_rank_0(size_t step, LogFiles& log_file, const Parameters& params);

Neurons.h:347:49: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_network_graph_to_log_file(LogFiles& log_file,

Neurons.h:352:45: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_positions_to_log_file(LogFiles& log_file, const Parameters& params,

Neurons.h:360:31: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
        void delete_synapses(size_t& num_synapses_deleted, NetworkGraph& network_graph);

Neurons.h:360:67: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
        void delete_synapses(size_t& num_synapses_deleted, NetworkGraph& network_graph);

Neurons.h:362:31: warning: non-const reference parameter 'num_synapses_created', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);

Neurons.h:362:61: warning: non-const reference parameter 'global_tree', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);

Neurons.h:362:88: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);

Neurons.h:368:70: warning: do not use pointer arithmetic 
                const auto result = std::minmax_element(local_values, local_values + num_neurons);

Neurons.h:372:62: warning: do not use pointer arithmetic 
                double my_avg = std::accumulate(local_values, local_values + num_neurons, 0.0);

Neurons.h:390:15: warning: do not use pointer arithmetic 
                        my_var += (local_values[neuron_id] - avg) * (local_values[neuron_id] - avg);

Neurons.h:390:49: warning: do not use pointer arithmetic 
                        my_var += (local_values[neuron_id] - avg) * (local_values[neuron_id] - avg);

Neurons.h:415:38: warning: non-const reference parameter 'list', make it const or use a pointer 
                std::list<PendingSynapseDeletion>& list);

Neurons.h:431:38: warning: non-const reference parameter 'list_pending_deletions', make it const or use a pointer 
                std::list<PendingSynapseDeletion>& list_pending_deletions);

Neurons.h:435:58: warning: non-const reference parameter 'list', make it const or use a pointer 
        void delete_synapses(std::list<PendingSynapseDeletion>& list,

Neurons.h:436:21: warning: non-const reference parameter 'axons', make it const or use a pointer 
                SynapticElements& axons,

Neurons.h:437:21: warning: non-const reference parameter 'dendrites_exc', make it const or use a pointer 
                SynapticElements& dendrites_exc,

Neurons.h:438:21: warning: non-const reference parameter 'dendrites_inh', make it const or use a pointer 
                SynapticElements& dendrites_inh,

Neurons.h:439:17: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
                NetworkGraph& network_graph,

Neurons.h:440:11: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
                size_t& num_synapses_deleted);

NeuronToSubdomainAssignment.h:77:68: warning: non-const reference parameter 'pos', make it const or use a pointer 
                const Position& min, const Position& max, std::vector<Position>& pos) const;

NeuronToSubdomainAssignment.h:82:46: warning: non-const reference parameter 'types', make it const or use a pointer 
                std::vector<SynapticElements::SignalType>& types) const;

NeuronToSubdomainAssignment.h:86:71: warning: non-const reference parameter 'areas', make it const or use a pointer 
                const Position& min, const Position& max, std::vector<std::string>& areas) const;

NeuronToSubdomainAssignment.h:91:68: warning: non-const reference parameter 'global_ids', make it const or use a pointer 
                size_t local_id_start, size_t local_id_end, std::vector<size_t>& global_ids) const = 0;

Octree.h:234:62: warning: non-const reference parameter 'allocator', make it const or use a pointer 
                explicit FunctorFreeNode(MPI_RMA_MemAllocator<OctreeNode>& allocator) noexcept : allocator(allocator) {}

Octree.h:245:2: warning: an exception may be thrown in function '~Octree' which should not throw exceptions [bugprone-exception-escape]
        ~Octree() /*noexcept(false)*/;

Octree.h:338:138: warning: non-const reference parameter 'target_neuron_id', make it const or use a pointer 
        [[nodiscard]] bool find_target_neuron(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, size_t& target_neuron_id, int& target_rank);

Octree.h:338:161: warning: non-const reference parameter 'target_rank', make it const or use a pointer 
        [[nodiscard]] bool find_target_neuron(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, size_t& target_neuron_id, int& target_rank);

Octree.h:340:55: warning: non-const reference parameter 'map_synapse_creation_requests_outgoing', make it const or use a pointer 
        void find_target_neurons(MapSynapseCreationRequests& map_synapse_creation_requests_outgoing, const Neurons& neurons);

Octree.h:411:9: warning: non-const reference parameter 'has_vacant_dendrites', make it const or use a pointer 
                bool& has_vacant_dendrites) const /*noexcept*/;

Octree.h:420:31: warning: non-const reference parameter 'list', make it const or use a pointer 
                ProbabilitySubintervalList& list,

Octree.h:428:141: warning: non-const reference parameter 'list', make it const or use a pointer 
        void create_interval(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, ProbabilitySubintervalList& list) const;

Octree.h:443:72: warning: non-const reference parameter 'list', make it const or use a pointer 
        static void append_node(OctreeNode* node, ProbabilitySubintervalList& list);

Octree.h:444:69: warning: non-const reference parameter 'list', make it const or use a pointer 
        void append_children(OctreeNode* node, ProbabilitySubintervalList& list, AccessEpochsStarted& epochs_started);

Octree.h:444:96: warning: non-const reference parameter 'epochs_started', make it const or use a pointer 
        void append_children(OctreeNode* node, ProbabilitySubintervalList& list, AccessEpochsStarted& epochs_started);

Parameters.h:16:7: warning: constructor does not initialize these fields: num_neurons, frac_neurons_exc, simulation_time, x_0, tau_x, k, tau_C, beta, refrac_time, h, C_target, eta_A, eta_D_ex, eta_D_in, nu, vacant_retract_ratio, accept_criterion, sigma, naive_method, max_num_pending_vacant_axons, num_log_files, log_start_neuron, mpi_rma_mem_size, seed_octree, seed_partition [cppcoreguidelines-pro-type-member-init]
class Parameters {

Partition.h:70:97: warning: non-const reference parameter 'neurons_in_subdomain', make it const or use a pointer 
        [[nodiscard]] Neurons get_local_neurons(const Parameters& params, NeuronToSubdomainAssignment& neurons_in_subdomain) {
                                                                  
Partition.h:127:92: warning: non-const reference parameter 'neurons_in_subdomain', make it const or use a pointer 
        [[nodiscard]] Neurons load_neurons(const Parameters& params, NeuronToSubdomainAssignment& neurons_in_subdomain);

Random.h:25:23: warning: random number generator seeded with a default argument will generate a predictable sequence of values [cert-msc32-c]
                static std::mt19937 random_generator;

Random.h:25:23: warning: random number generator seeded with a default argument will generate a predictable sequence of values [cert-msc51-cpp]						

SubdomainFromFile.h:43:77: warning: non-const reference parameter 'nodes', make it const or use a pointer 
        void read_nodes_from_file(const Position& min, const Position& max, Nodes& nodes);

SubdomainFromNeuronDensity.h:25:26: warning: 26 is a magic number; consider replacing it with a named constant 
                double um_per_neuron = 26);					

Utility.h:20:11: warning: 10 is a magic number; consider replacing it with a named constant 
                        val /= 10;				
	
MPIWrapper.cpp:82:25: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
        const int num_digits = Util::num_digits(num_ranks - 1);

MPIWrapper.cpp:109:19: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
        const int rest = static_cast<int>(num_neurons) % num_ranks;

MPIWrapper.cpp:110:25: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]
        const int block_size = static_cast<int>(num_neurons) / num_ranks;

MPIWrapper.cpp:334:3: warning: do not use pointer arithmetic 
                inout[3 * i] = std::min(in[3 * i], inout[3 * i]);

MPIWrapper.cpp:334:27: warning: do not use pointer arithmetic 
                inout[3 * i] = std::min(in[3 * i], inout[3 * i]);

MPIWrapper.cpp:334:38: warning: do not use pointer arithmetic 
                inout[3 * i] = std::min(in[3 * i], inout[3 * i]);

MPIWrapper.cpp:335:3: warning: do not use pointer arithmetic 
                inout[3 * i + 1] += in[3 * i + 1];

MPIWrapper.cpp:335:23: warning: do not use pointer arithmetic 
                inout[3 * i + 1] += in[3 * i + 1];
                                    ^
MPIWrapper.cpp:336:3: warning: do not use pointer arithmetic 
                inout[3 * i + 2] = std::max(in[3 * i + 2], inout[3 * i + 2]);

MPIWrapper.cpp:336:31: warning: do not use pointer arithmetic 
                inout[3 * i + 2] = std::max(in[3 * i + 2], inout[3 * i + 2]);

MPIWrapper.cpp:336:46: warning: do not use pointer arithmetic 
                inout[3 * i + 2] = std::max(in[3 * i + 2], inout[3 * i + 2]);											

NeuronToSubdomainAssignment.cpp:31:20: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        auto max = Vec3d{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };

NeuronToSubdomainAssignment.cpp:31:65: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        auto max = Vec3d{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };

NeuronToSubdomainAssignment.cpp:31:110: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        auto max = Vec3d{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };
		
Neurons.cpp:35:54: warning: 2.0 is a magic number; consider replacing it with a named constant 
        random_number_distribution(0.0, std::nextafter(1.0, 2.0))

Neurons.cpp:288:28: warning: 5 is a magic number; consider replacing it with a named constant 
                        size_t synapse_id = arr[5];

Neurons.cpp:381:3: warning: do not use pointer arithmetic 
                rma_buffer_branch_nodes[global_subdomain_id] = *root_node;

Neurons.cpp:396:47: warning: do not use pointer arithmetic 
                        global_tree.insert(rma_buffer_branch_nodes + i);

Neurons.cpp:814:40: warning: 5 is a magic number; consider replacing it with a named constant 
                        << std::setw(cwidth) << sums_global[5] / 2 // As counted on both of the neurons

Neurons.cpp:900:42: warning: 6 is a magic number; consider replacing it with a named constant 
        file << std::fixed << std::setprecision(6);

Neurons.cpp:906:40: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                const char* const signal_type_name = signal_types[neuron_id] == SynapticElements::SignalType::EXCITATORY ? "ex" : "in";

Neurons.cpp:906:40: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead 

Octree.cpp:28:54: warning: 2.0 is a magic number; consider replacing it with a named constant 
        random_number_distribution(0.0, std::nextafter(1.0, 2.0)) {

Octree.cpp:42:54: warning: 2.0 is a magic number; consider replacing it with a named constant 
        random_number_distribution(0.0, std::nextafter(1.0, 2.0)) {

Octree.cpp:52:9: warning: an exception may be thrown in function '~Octree' which should not throw exceptions [bugprone-exception-escape]
Octree::~Octree() /*noexcept(false)*/ {

Octree.cpp:255:18: warning: 7 is a magic number; consider replacing it with a named constant 
                        for (auto i = 7; i >= 0; i--) {

Octree.cpp:256:20: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                if (nullptr == root->children[i]) {

Octree.cpp:257:6: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        local_children[i] = nullptr;

Octree.cpp:261:29: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                rank_addr_pair.second = root->children[i];

Octree.cpp:279:47: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        const auto target_child_displ = MPI_Aint(root->children[i]) - base_pointers[target_rank];

Octree.cpp:279:68: warning: do not use pointer arithmetic 
                                        const auto target_child_displ = MPI_Aint(root->children[i]) - base_pointers[target_rank];

Octree.cpp:285:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                local_children[i] = ret.first->second;

Octree.cpp:349:19: warning: 7 is a magic number; consider replacing it with a named constant 
                                for (auto i = 7; i >= 0; i--) {

Octree.cpp:350:21: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        if (nullptr == stack_elem->children[i]) {

Octree.cpp:351:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                                local_children[i] = nullptr;

Octree.cpp:355:30: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        rank_addr_pair.second = stack_elem->children[i];

Octree.cpp:373:48: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                                const auto target_child_displ = MPI_Aint(stack_elem->children[i]) - base_pointers[target_rank];

Octree.cpp:373:75: warning: do not use pointer arithmetic 
                                                const auto target_child_displ = MPI_Aint(stack_elem->children[i]) - base_pointers[target_rank];

Octree.cpp:379:6: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        local_children[i] = ret.first->second;

Octree.cpp:541:52: warning: do not use pointer arithmetic 
                                const auto target_child_displ = MPI_Aint(child - base_pointers[target_rank]);

Octree.cpp:541:54: warning: do not use pointer arithmetic 
                                const auto target_child_displ = MPI_Aint(child - base_pointers[target_rank]);

Octree.cpp:718:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                curr = curr->children[my_idx];

Octree.cpp:738:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        prev->children[idx] = new_node;

Octree.cpp:784:2: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
        prev->children[my_idx] = new_node;

Octree.cpp:789:2: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
        prev->children[my_idx]->cell.set_size(xyz_min, xyz_max);

Octree.cpp:862:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr->children[my_idx] = node_to_insert;

Octree.cpp:873:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                if (curr->children[my_idx] != nullptr) {

Octree.cpp:874:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr = curr->children[my_idx];

Octree.cpp:899:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr->children[my_idx] = new_node;

SpaceFillingCurve.cpp:9:38: warning: 60 is a magic number; consider replacing it with a named constant 
        for (uint8_t idx_bit = 0; idx_bit < 60; idx_bit += 3) {

SpaceFillingCurve.cpp:14:38: warning: 60 is a magic number; consider replacing it with a named constant 
        for (uint8_t idx_bit = 1; idx_bit < 60; idx_bit += 3) {

SpaceFillingCurve.cpp:19:38: warning: 60 is a magic number; consider replacing it with a named constant 
        for (uint8_t idx_bit = 2; idx_bit < 60; idx_bit += 3) {

SubdomainFromNeuronDensity.cpp:44:12: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        constexpr unsigned short max_short = std::numeric_limits<unsigned short>().max();

SubdomainFromNeuronDensity.cpp:77:33: warning: 16U is a magic number; consider replacing it with a named constant 
                                random_position |= (y_it << 16U);

SubdomainFromNeuronDensity.cpp:78:33: warning: 32U is a magic number; consider replacing it with a named constant 
                                random_position |= (x_it << 32U);

SubdomainFromNeuronDensity.cpp:182:13: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        Vec3d max{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };

SubdomainFromNeuronDensity.cpp:182:58: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        Vec3d max{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };

SubdomainFromNeuronDensity.cpp:182:103: warning: narrowing conversion from 'unsigned long' to 'double' [bugprone-narrowing-conversions]
        Vec3d max{ (subdomain_3idx.x + 1) * x_subdomain_length, (subdomain_3idx.y + 1) * y_subdomain_length, (subdomain_3idx.z + 1) * z_subdomain_length };

main.cpp:50:29: warning: 0.8 is a magic number; consider replacing it with a named constant 
        params->frac_neurons_exc = 0.8;                          // CHANGE

main.cpp:51:16: warning: 0.05 is a magic number; consider replacing it with a named constant 
        params->x_0 = 0.05;

main.cpp:52:18: warning: 5.0 is a magic number; consider replacing it with a named constant 
        params->tau_x = 5.0;

main.cpp:53:14: warning: 0.03 is a magic number; consider replacing it with a named constant 
        params->k = 0.03;

main.cpp:54:18: warning: 10000 is a magic number; consider replacing it with a named constant 
        params->tau_C = 10000; //5000;   //very old 60.0;
 
main.cpp:55:17: warning: 0.001 is a magic number; consider replacing it with a named constant 
        params->beta = 0.001;  //very old 0.05;

main.cpp:56:14: warning: 10 is a magic number; consider replacing it with a named constant 
        params->h = 10;

main.cpp:57:21: warning: 0.5 is a magic number; consider replacing it with a named constant 
        params->C_target = 0.5; // gold 0.5;

main.cpp:58:24: warning: 4.0 is a magic number; consider replacing it with a named constant 
        params->refrac_time = 4.0;

main.cpp:62:15: warning: 1e-4 is a magic number; consider replacing it with a named constant 
        params->nu = 1e-4; // gold 1e-5; // element growth rate

main.cpp:64:18: warning: 750.0 is a magic number; consider replacing it with a named constant 
        params->sigma = 750.0;

main.cpp:65:26: warning: 9 is a magic number; consider replacing it with a named constant 
        params->num_log_files = 9;  // NOT USED

main.cpp:67:29: warning: 300 is a magic number; consider replacing it with a named constant 
        params->mpi_rma_mem_size = 300 * 1024 * 1024;  // 300 MB

main.cpp:67:35: warning: 1024 is a magic number; consider replacing it with a named constant 
        params->mpi_rma_mem_size = 300 * 1024 * 1024;  // 300 MB

main.cpp:67:42: warning: 1024 is a magic number; consider replacing it with a named constant 
        params->mpi_rma_mem_size = 300 * 1024 * 1024;  // 300 MB

main.cpp:68:41: warning: 1000 is a magic number; consider replacing it with a named constant 
        params->max_num_pending_vacant_axons = 1000;

main.cpp:86:58: warning: 10 is a magic number; consider replacing it with a named constant 
        params->simulation_time = stoull(arguments[4], nullptr, 10);  //6000000;

main.cpp:87:54: warning: 10 is a magic number; consider replacing it with a named constant 
        params->num_neurons = stoull(arguments[2], nullptr, 10);        // CHANGE

main.cpp:90:60: warning: 6 is a magic number; consider replacing it with a named constant 
        params->file_with_neuron_positions = (arguments.size() >= 6) ? arguments[5] : "";

main.cpp:90:75: warning: 5 is a magic number; consider replacing it with a named constant 
        params->file_with_neuron_positions = (arguments.size() >= 6) ? arguments[5] : "";

main.cpp:91:51: warning: 7 is a magic number; consider replacing it with a named constant 
        params->file_with_network = (arguments.size() >= 7) ? arguments[6] : "";

main.cpp:91:66: warning: 6 is a magic number; consider replacing it with a named constant 
        params->file_with_network = (arguments.size() >= 7) ? arguments[6] : "";

main.cpp:92:52: warning: 10 is a magic number; consider replacing it with a named constant 
        params->seed_octree = stol(arguments[3], nullptr, 10);

main.cpp:99:36: warning: 0.5 is a magic number; consider replacing it with a named constant 
        if (!(params->accept_criterion <= 0.5)) {

main.cpp:115:64: warning: 69 is a magic number; consider replacing it with a named constant 
        RelearnException::check(3 * TimerRegion::NUM_TIMER_REGIONS == 69);

main.cpp:117:21: warning: 69 is a magic number; consider replacing it with a named constant 
        std::array<double, 69> timers_local{};

main.cpp:123:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        timers_local[3 * i + j] = elapsed;

main.cpp:127:21: warning: 69 is a magic number; consider replacing it with a named constant 
        std::array<double, 69> timers_global{};
 
main.cpp:143:3: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                timers_global[3 * i + 1] /= MPIWrapper::num_ranks;

main.cpp:149:23: warning: 6 is a magic number; consider replacing it with a named constant 
                std::cout.precision(6);

main.cpp:239:31: warning: 5 is a magic number; consider replacing it with a named constant 
        outfile << std::setprecision(5);

main.cpp:274:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
int main(int argc, char** argv) {

main.cpp:275:49: warning: do not use pointer arithmetic 
        std::vector<std::string> arguments{ argv, argv + argc };

main.cpp:279:25: warning: 5 is a magic number; consider replacing it with a named constant 
        if (arguments.size() < 5) {

main.cpp:308:79: warning: 10 is a magic number; consider replacing it with a named constant 
        randomNumberSeeds::octree = static_cast<int64_t>(stol(arguments[3], nullptr, 10));

main.cpp:319:6: warning: 5 is a magic number; consider replacing it with a named constant 
        if (5 < argc) {

main.cpp:407:6: warning: 6 is a magic number; consider replacing it with a named constant 
        if (6 < argc) {
