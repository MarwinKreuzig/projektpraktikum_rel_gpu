Cell.h:107:25: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                const auto position = dendrites[static_cast<int>(dendrite_type)].xyz_pos;
Cell.h:108:22: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                const auto valid = dendrites[static_cast<int>(dendrite_type)].xyz_pos_valid;
Cell.h:130:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                return dendrites[static_cast<int>(dendrite_type)].num_dendrites;

MPIWrapper.h:105:78: warning: non-const reference parameter 'dst', make it const or use a pointer 
        static void all_to_all(const std::vector<size_t>& src, std::vector<size_t>& dst, Scope scope);
MPIWrapper.h:108:99: warning: non-const reference parameter 'token', make it const or use a pointer 
        static void async_send(const T* buffer, size_t size_in_bytes, int rank, Scope scope, AsyncToken& token) {
MPIWrapper.h:117:96: warning: non-const reference parameter 'token', make it const or use a pointer 
        static void async_receive(T* buffer, size_t size_in_bytes, int rank, Scope scope, AsyncToken& token) {
MPIWrapper.h:156:77: warning: non-const reference parameter 'win', make it const or use a pointer 
        static void get(T* ptr, int target_rank, MPI_Aint target_display, MPI_Win& win) {
MPIWrapper.h:163:39: warning: non-const reference parameter 'request', make it const or use a pointer 
        static void wait_request(AsyncToken& request);
MPIWrapper.h:169:74: warning: non-const reference parameter 'xyz_pos', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);
MPIWrapper.h:169:101: warning: non-const reference parameter 'recvcounts', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);
MPIWrapper.h:169:131: warning: non-const reference parameter 'displs', make it const or use a pointer 
        static void all_gather_v(size_t total_num_neurons, std::vector<double>& xyz_pos, std::vector<int>& recvcounts, std::vector<int>& displs);
MPIWrapper.h:171:55: warning: non-const reference parameter 'tokens', make it const or use a pointer 
        static void wait_all_tokens(std::vector<AsyncToken>& tokens);
		
NetworkGraph.h:63:23: warning: non-const reference parameter 'edges', make it const or use a pointer 
        void add_edge(Edges& edges, int rank, size_t neuron_id, int weight);
NetworkGraph.h:72:164: warning: non-const reference parameter 'global_id_to_local_id', make it const or use a pointer 
        void translate_global_to_local(const std::set<size_t>& global_ids, const std::map<size_t, int>& id_to_rank, const Partition& partition, std::map<size_t, size_t>& global_id_to_local_id);
NetworkGraph.h:74:80: warning: non-const reference parameter 'foreing_ids', make it const or use a pointer 
        void load_neuron_positions(const std::string& path_neurons, std::set<size_t>& foreing_ids, std::map<size_t, Vec3d>& id_to_pos);
NetworkGraph.h:74:118: warning: non-const reference parameter 'id_to_pos', make it const or use a pointer 
        void load_neuron_positions(const std::string& path_neurons, std::set<size_t>& foreing_ids, std::map<size_t, Vec3d>& id_to_pos);
NetworkGraph.h:76:101: warning: non-const reference parameter 'foreing_ids', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses);
NetworkGraph.h:76:160: warning: non-const reference parameter 'local_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses);
NetworkGraph.h:76:222: warning: non-const reference parameter 'out_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses);
NetworkGraph.h:76:282: warning: non-const reference parameter 'in_synapses', make it const or use a pointer 
        void load_synapses(const std::string& path_synapses, const Partition& partition, std::set<size_t>& foreing_ids, std::vector<std::tuple<size_t, size_t, int>>& local_synapses, std::vector<std::tuple<size_t, size_t, int>>& out_synapses, std::vector<std::tuple<size_t, size_t, int>>& in_synapses);
		
NeuronIdMap.h:34:24: warning: non-const reference parameter 'rank_to_start_neuron_id', make it const or use a pointer 
                std::vector<size_t>& rank_to_start_neuron_id);
NeuronIdMap.h:41:34: warning: non-const reference parameter 'pos_to_rank_neuron_id', make it const or use a pointer 
                std::map<Vec3d, RankNeuronId>& pos_to_rank_neuron_id);
		
NeuronModels.h:129:90: warning: non-const reference parameter 'C', make it const or use a pointer 
        void update_electrical_activity(const NetworkGraph& network_graph, std::vector<double>& C);
	
NeuronToSubdomainAssignment.h:76:68: warning: non-const reference parameter 'pos', make it const or use a pointer 
                const Position& min, const Position& max, std::vector<Position>& pos) const;
NeuronToSubdomainAssignment.h:81:46: warning: non-const reference parameter 'types', make it const or use a pointer 
                std::vector<SynapticElements::SignalType>& types) const;
NeuronToSubdomainAssignment.h:85:71: warning: non-const reference parameter 'areas', make it const or use a pointer 
                const Position& min, const Position& max, std::vector<std::string>& areas) const;
NeuronToSubdomainAssignment.h:90:68: warning: non-const reference parameter 'global_ids', make it const or use a pointer 
                size_t local_id_start, size_t local_id_end, std::vector<size_t>& global_ids) const = 0;
			
Neurons.h:298:35: warning: non-const reference parameter 'global_tree', make it const or use a pointer 
        void update_connectivity(Octree& global_tree,
Neurons.h:299:17: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
                NetworkGraph& network_graph,
Neurons.h:300:11: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
                size_t& num_synapses_deleted,
Neurons.h:301:11: warning: non-const reference parameter 'num_synapses_created', make it const or use a pointer 
                size_t& num_synapses_created) {
Neurons.h:307:88: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_sums_of_synapses_and_elements_to_log_file_on_rank_0(size_t step, LogFiles& log_file, const Parameters& params, size_t sum_synapses_deleted, size_t sum_synapses_created);
Neurons.h:310:75: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_neurons_overview_to_log_file_on_rank_0(size_t step, LogFiles& log_file, const Parameters& params);
Neurons.h:312:49: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_network_graph_to_log_file(LogFiles& log_file,
Neurons.h:317:45: warning: non-const reference parameter 'log_file', make it const or use a pointer 
        void print_positions_to_log_file(LogFiles& log_file, const Parameters& params,
Neurons.h:325:31: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
        void delete_synapses(size_t& num_synapses_deleted, NetworkGraph& network_graph);
Neurons.h:325:67: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
        void delete_synapses(size_t& num_synapses_deleted, NetworkGraph& network_graph);
Neurons.h:327:31: warning: non-const reference parameter 'num_synapses_created', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);
Neurons.h:327:61: warning: non-const reference parameter 'global_tree', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);
Neurons.h:327:88: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
        void create_synapses(size_t& num_synapses_created, Octree& global_tree, NetworkGraph& network_graph);
Neurons.h:333:70: warning: do not use pointer arithmetic 
                const auto result = std::minmax_element(local_values, local_values + num_neurons);
Neurons.h:337:62: warning: do not use pointer arithmetic 
                double my_avg = std::accumulate(local_values, local_values + num_neurons, 0.0);
Neurons.h:355:15: warning: do not use pointer arithmetic 
                        my_var += (local_values[neuron_id] - avg) * (local_values[neuron_id] - avg);
Neurons.h:355:49: warning: do not use pointer arithmetic 
                        my_var += (local_values[neuron_id] - avg) * (local_values[neuron_id] - avg);
Neurons.h:380:38: warning: non-const reference parameter 'list', make it const or use a pointer 
                std::list<PendingSynapseDeletion>& list);
Neurons.h:396:38: warning: non-const reference parameter 'list_pending_deletions', make it const or use a pointer 
                std::list<PendingSynapseDeletion>& list_pending_deletions);
Neurons.h:400:58: warning: non-const reference parameter 'list', make it const or use a pointer 
        void delete_synapses(std::list<PendingSynapseDeletion>& list,
Neurons.h:401:21: warning: non-const reference parameter 'axons', make it const or use a pointer 
                SynapticElements& axons,
Neurons.h:402:21: warning: non-const reference parameter 'dendrites_exc', make it const or use a pointer 
                SynapticElements& dendrites_exc,
Neurons.h:403:21: warning: non-const reference parameter 'dendrites_inh', make it const or use a pointer 
                SynapticElements& dendrites_inh,
Neurons.h:404:17: warning: non-const reference parameter 'network_graph', make it const or use a pointer 
                NetworkGraph& network_graph,
Neurons.h:405:11: warning: non-const reference parameter 'num_synapses_deleted', make it const or use a pointer 
                size_t& num_synapses_deleted);
		
Octree.h:125:23: warning: binding reference member 'dendrites_exc_cnts' to a temporary value [clang-diagnostic-dangling-field]
                        dendrites_exc_cnts(std::vector<double>{}),
Octree.h:218:30: note: reference member declared here
                const std::vector<double>& dendrites_exc_cnts;
Octree.h:126:33: warning: binding reference member 'dendrites_exc_connected_cnts' to a temporary value [clang-diagnostic-dangling-field]
                        dendrites_exc_connected_cnts(std::vector<double>{}),
Octree.h:219:30: note: reference member declared here
                const std::vector<double>& dendrites_exc_connected_cnts;
Octree.h:127:23: warning: binding reference member 'dendrites_inh_cnts' to a temporary value [clang-diagnostic-dangling-field]
                        dendrites_inh_cnts(std::vector<double>{}),
Octree.h:220:30: note: reference member declared here
                const std::vector<double>& dendrites_inh_cnts;
Octree.h:128:33: warning: binding reference member 'dendrites_inh_connected_cnts' to a temporary value [clang-diagnostic-dangling-field]
                        dendrites_inh_connected_cnts(std::vector<double>{}) {
Octree.h:221:30: note: reference member declared here
                const std::vector<double>& dendrites_inh_connected_cnts;
Octree.h:233:62: warning: non-const reference parameter 'allocator', make it const or use a pointer 
                explicit FunctorFreeNode(MPI_RMA_MemAllocator<OctreeNode>& allocator) noexcept : allocator(allocator) {}
Octree.h:338:124: warning: non-const reference parameter 'target_neuron_id', make it const or use a pointer 
        bool find_target_neuron(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, size_t& target_neuron_id, int& target_rank);
Octree.h:338:147: warning: non-const reference parameter 'target_rank', make it const or use a pointer 
        bool find_target_neuron(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, size_t& target_neuron_id, int& target_rank);
Octree.h:340:54: warning: non-const reference parameter at index 0, make it const or use a pointer 
        void find_target_neurons(MapSynapseCreationRequests&, Neurons&);
Octree.h:340:64: warning: non-const reference parameter at index 1, make it const or use a pointer 
        void find_target_neurons(MapSynapseCreationRequests&, Neurons&);
Octree.h:411:9: warning: non-const reference parameter 'has_vacant_dendrites', make it const or use a pointer 
                bool& has_vacant_dendrites) const /*noexcept*/;
Octree.h:420:31: warning: non-const reference parameter 'list', make it const or use a pointer 
                ProbabilitySubintervalList& list,
Octree.h:428:141: warning: non-const reference parameter 'list', make it const or use a pointer 
        void create_interval(size_t src_neuron_id, const Vec3d& axon_pos_xyz, Cell::DendriteType dendrite_type_needed, ProbabilitySubintervalList& list) const;
Octree.h:443:65: warning: non-const reference parameter 'list', make it const or use a pointer 
        void append_node(OctreeNode* node, ProbabilitySubintervalList& list);
Octree.h:444:69: warning: non-const reference parameter 'list', make it const or use a pointer 
        void append_children(OctreeNode* node, ProbabilitySubintervalList& list, AccessEpochsStarted& epochs_started);
Octree.h:444:96: warning: non-const reference parameter 'epochs_started', make it const or use a pointer 
        void append_children(OctreeNode* node, ProbabilitySubintervalList& list, AccessEpochsStarted& epochs_started);	
	
Partition.h:69:83: warning: non-const reference parameter 'neurons_in_subdomain', make it const or use a pointer 
        Neurons get_local_neurons(const Parameters& params, NeuronToSubdomainAssignment& neurons_in_subdomain) {
Partition.h:126:78: warning: non-const reference parameter 'neurons_in_subdomain', make it const or use a pointer 
        Neurons load_neurons(const Parameters& params, NeuronToSubdomainAssignment& neurons_in_subdomain);

SubdomainFromFile.h:43:77: warning: non-const reference parameter 'nodes', make it const or use a pointer 
        void read_nodes_from_file(const Position& min, const Position& max, Nodes& nodes);
		
Parameters.h:16:7: warning: constructor does not initialize these fields: num_neurons, frac_neurons_exc, simulation_time, x_0, tau_x, k, tau_C, beta, refrac_time, h, C_target, eta_A, eta_D_ex, eta_D_in, nu, vacant_retract_ratio, accept_criterion, sigma, naive_method, max_num_pending_vacant_axons, num_log_files, log_start_neuron, mpi_rma_mem_size, seed_octree, seed_partition [hicpp-member-init]
		class Parameters {
		
Octree.cpp:266:20: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                if (nullptr == root->children[i]) {
Octree.cpp:267:6: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        local_children[i] = nullptr;
Octree.cpp:271:29: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                rank_addr_pair.second = root->children[i];
Octree.cpp:289:47: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        const auto target_child_displ = MPI_Aint(root->children[i]) - base_pointers[target_rank];
Octree.cpp:289:68: warning: do not use pointer arithmetic 
                                        const auto target_child_displ = MPI_Aint(root->children[i]) - base_pointers[target_rank];
Octree.cpp:295:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                local_children[i] = ret.first->second;
Octree.cpp:360:21: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        if (nullptr == stack_elem->children[i]) {
Octree.cpp:361:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                                local_children[i] = nullptr;
Octree.cpp:365:30: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        rank_addr_pair.second = stack_elem->children[i];
Octree.cpp:383:48: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                                const auto target_child_displ = MPI_Aint(stack_elem->children[i]) - base_pointers[target_rank];
Octree.cpp:383:75: warning: do not use pointer arithmetic 
                                                const auto target_child_displ = MPI_Aint(stack_elem->children[i]) - base_pointers[target_rank];
Octree.cpp:389:6: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                                        local_children[i] = ret.first->second;
Octree.cpp:551:54: warning: do not use pointer arithmetic 
                                const auto target_child_displ = MPI_Aint(child - base_pointers[target_rank]);
Octree.cpp:728:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                curr = curr->children[my_idx];
Octree.cpp:748:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        prev->children[idx] = new_node;
Octree.cpp:794:2: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
        prev->children[my_idx] = new_node;
Octree.cpp:799:2: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
        prev->children[my_idx]->cell.set_size(xyz_min, xyz_max);
Octree.cpp:872:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr->children[my_idx] = node_to_insert;
Octree.cpp:883:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                if (curr->children[my_idx] != nullptr) {
Octree.cpp:884:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr = curr->children[my_idx];
Octree.cpp:910:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        curr->children[my_idx] = new_node;

Neurons.cpp:380:3: warning: do not use pointer arithmetic 
                rma_buffer_branch_nodes[global_subdomain_id] = *root_node;
Neurons.cpp:395:47: warning: do not use pointer arithmetic 
                        global_tree.insert(rma_buffer_branch_nodes + i);
							
main.cpp:123:4: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                        timers_local[3 * i + j] = elapsed;
main.cpp:143:3: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead 
                timers_global[3 * i + 1] /= MPIWrapper::num_ranks;
main.cpp:275:49: warning: do not use pointer arithmetic 
        std::vector<std::string> arguments{ argv, argv + argc };